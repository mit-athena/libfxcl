/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>

#include <mit-copyright.h>
#include <krb.h>
#include <fx/fxserver_err.h>
#include <sys/time.h>
#if defined(SOLARIS) && defined(DEBUG)
#undef RPC_SVC_FG	
#endif	
#define PTRFILELEN 64
#define COURSE_NAME_LEN 32
#define MAX_BURST_SIZE 10240

enum PaperType {
	TYPE_WILDCARD = 0,
	TURNEDIN = 1,
	TAKEN = 2,
	GRADED = 3,
	PICKEDUP = 4,
	HANDOUT = 5,
	EXCHANGE = 6,
	TEACHERS_ARCHIVE = 7,
	TEACHERS_HANDOUT = 8
};
typedef enum PaperType PaperType;
extern bool_t xdr_PaperType(XDR *, PaperType *);

#define ASSIGNMENT_WILDCARD 0
#define AUTHOR_WILDCARD "*"
#define OWNER_WILDCARD "*"
#define FILENAME_WILDCARD "*"
#define ID_WILDCARD "*"
#define PAPER_EXECUTABLE 1

struct fx_timeval {
	long tv_sec;
	long tv_usec;
};
typedef struct fx_timeval fx_timeval;
extern bool_t xdr_fx_timeval(XDR *, fx_timeval *);


struct PaperID {
	char *host;
	struct fx_timeval time;
};
typedef struct PaperID PaperID;
extern bool_t xdr_PaperID(XDR *, PaperID *);


struct Paper {
	PaperID location;
	PaperType type;
	int assignment;
	char *author;
	char *owner;
	char *filename;
	char *desc;
	struct fx_timeval created;
	struct fx_timeval modified;
	int size;
	int words;
	int lines;
	int flags;
};
typedef struct Paper Paper;
extern bool_t xdr_Paper(XDR *, Paper *);


struct Contents {
	Paper p;
	char ptrfile[64];
};
typedef struct Contents Contents;
extern bool_t xdr_Contents(XDR *, Contents *);


struct init_data {
	char *course;
	KTEXT_ST auth;
};
typedef struct init_data init_data;
extern bool_t xdr_init_data(XDR *, init_data *);


struct acl_maint {
	char *aclname;
	char *aclparam;
};
typedef struct acl_maint acl_maint;
extern bool_t xdr_acl_maint(XDR *, acl_maint *);


struct burst_data {
	int size;
	char data[10240];
};
typedef struct burst_data burst_data;
extern bool_t xdr_burst_data(XDR *, burst_data *);


struct TwoPaper {
	Paper src;
	Paper dest;
};
typedef struct TwoPaper TwoPaper;
extern bool_t xdr_TwoPaper(XDR *, TwoPaper *);


struct portionspec {
	Paper p;
	int start;
	int end;
};
typedef struct portionspec portionspec;
extern bool_t xdr_portionspec(XDR *, portionspec *);


enum SyncStat {
	NO_SYNC = 0,
	WANT_SYNC = 1,
	AM_SYNC = 2
};
typedef enum SyncStat SyncStat;
extern bool_t xdr_SyncStat(XDR *, SyncStat *);


struct quorumstat {
	SyncStat sync;
};
typedef struct quorumstat quorumstat;
extern bool_t xdr_quorumstat(XDR *, quorumstat *);


struct DBVers {
	long synctime;
	long commit;
};
typedef struct DBVers DBVers;
extern bool_t xdr_DBVers(XDR *, DBVers *);


struct init_res {
	long local_errno;
	union {
		char *sync;
	} init_res_u;
};
typedef struct init_res init_res;
extern bool_t xdr_init_res(XDR *, init_res *);


typedef struct stringnode *stringlist;
extern bool_t xdr_stringlist(XDR *, stringlist *);


struct stringnode {
	char *s;
	stringlist next;
};
typedef struct stringnode stringnode;
extern bool_t xdr_stringnode(XDR *, stringnode *);


struct stringlist_res {
	long local_errno;
	union {
		stringlist list;
	} stringlist_res_u;
};
typedef struct stringlist_res stringlist_res;
extern bool_t xdr_stringlist_res(XDR *, stringlist_res *);


typedef struct PaperNode *Paperlist;
extern bool_t xdr_Paperlist(XDR *, Paperlist *);


struct PaperNode {
	Paper p;
	Paperlist next;
};
typedef struct PaperNode PaperNode;
extern bool_t xdr_PaperNode(XDR *, PaperNode *);


struct Paperlist_res {
	long local_errno;
	union {
		Paperlist list;
	} Paperlist_res_u;
};
typedef struct Paperlist_res Paperlist_res;
extern bool_t xdr_Paperlist_res(XDR *, Paperlist_res *);


struct retrieve_res {
	long local_errno;
	union {
		burst_data burst;
	} retrieve_res_u;
};
typedef struct retrieve_res retrieve_res;
extern bool_t xdr_retrieve_res(XDR *, retrieve_res *);


struct krb_info {
	char *service;
	char *instance;
	char *realm;
};
typedef struct krb_info krb_info;
extern bool_t xdr_krb_info(XDR *, krb_info *);


struct krb_info_res {
	long local_errno;
	union {
		krb_info info;
	} krb_info_res_u;
};
typedef struct krb_info_res krb_info_res;
extern bool_t xdr_krb_info_res(XDR *, krb_info_res *);


struct quorum_res {
	int vote;
	DBVers vers;
};
typedef struct quorum_res quorum_res;
extern bool_t xdr_quorum_res(XDR *, quorum_res *);


struct server_stats {
	long start_time;
	long uptime;
	int num_requests;
	int bytes_sent;
	int bytes_recv;
	int n_init;
	int n_list_acl;
	int n_add_acl;
	int n_delete_acl;
	int n_create_course;
	int n_delete_course;
	int n_list_courses;
	int n_list;
	int n_send_file;
	int n_send_burst;
	int n_end_send;
	int n_retrieve_file;
	int n_retrieve_burst;
	int n_copy;
	int n_move;
	int n_delete;
	int n_portion;
	int n_krb_info;
	int n_kill_server;
	int n_server_stats;
	int n_server_quorum;
	int n_server_store;
	int n_server_delete;
	int n_server_commit;
	int n_server_end_course;
	int n_server_requpdate;
	int n_server_start_upd;
	int n_server_end_upd;
	DBVers vers;
};
typedef struct server_stats server_stats;
extern bool_t xdr_server_stats(XDR *, server_stats *);


#define FXSERVER ((u_long)100)
#define FXVERS ((u_long)1)
#define INIT ((u_long)1)
#define LIST_ACL ((u_long)2)
#define ADD_ACL ((u_long)3)
#define DELETE_ACL ((u_long)4)
#define CREATE_COURSE ((u_long)10)
#define DELETE_COURSE ((u_long)11)
#define LIST_COURSES ((u_long)12)
#define LIST ((u_long)15)
#define SEND_FILE ((u_long)16)
#define SEND_BURST ((u_long)17)
#define END_SEND ((u_long)18)
#define RETRIEVE_FILE ((u_long)19)
#define RETRIEVE_BURST ((u_long)20)
#define COPY ((u_long)21)
#define MOVE ((u_long)22)
#define DELETE ((u_long)23)
#define PORTION ((u_long)24)
#define KRB_INFO ((u_long)25)
#define KILL_SERVER ((u_long)30)
#define SERVER_STATS ((u_long)31)
#define SERVER_QUORUM ((u_long)50)
#define SERVER_STORE ((u_long)51)
#define SERVER_DELETE ((u_long)52)
#define SERVER_COMMIT ((u_long)53)

#ifdef _RPCGEN_SVC
extern init_res *init_1(init_data *, struct svc_req *);
extern stringlist_res *list_acl_1(char **, struct svc_req *);
extern long *add_acl_1(acl_maint *, struct svc_req *);
extern long *delete_acl_1(acl_maint *, struct svc_req *);
extern long *create_course_1(char **, struct svc_req *);
extern long *delete_course_1(char **, struct svc_req *);
extern stringlist_res *list_courses_1(int *, struct svc_req *);
extern Paperlist_res *list_1(Paper *, struct svc_req *);
extern long *send_file_1(Paper *, struct svc_req *);
extern long *send_burst_1(burst_data *, struct svc_req *);
extern long *end_send_1(int *, struct svc_req *);
extern long *retrieve_file_1(Paper *, struct svc_req *);
extern retrieve_res *retrieve_burst_1(int *, struct svc_req *);
extern long *copy_1(TwoPaper *, struct svc_req *);
extern long *move_1(TwoPaper *, struct svc_req *);
extern long *delete_1(Paper *, struct svc_req *);
extern long *portion_1(portionspec *, struct svc_req *);
extern krb_info_res *krb_info_1(int *, struct svc_req *);
extern long *kill_server_1(int *, struct svc_req *);
extern server_stats *server_stats_1(int *, struct svc_req *);
extern quorum_res *server_quorum_1(quorumstat *, struct svc_req *);
extern long *server_store_1(Contents *, struct svc_req *);
extern long *server_delete_1(Contents *, struct svc_req *);
extern long *server_commit_1(DBVers *, struct svc_req *);
#endif
#ifdef _RPCGEN_CLNT
extern init_res *init_1(init_data *, CLIENT *);
extern stringlist_res *list_acl_1(char **, CLIENT *);
extern long *add_acl_1(acl_maint *, CLIENT *);
extern long *delete_acl_1(acl_maint *, CLIENT *);
extern long *create_course_1(char **, CLIENT *);
extern long *delete_course_1(char **, CLIENT *);
extern stringlist_res *list_courses_1(int *, CLIENT *);
extern Paperlist_res *list_1(Paper *, CLIENT *);
extern long *send_file_1(Paper *, CLIENT *);
extern long *send_burst_1(burst_data *, CLIENT *);
extern long *end_send_1(int *, CLIENT *);
extern long *retrieve_file_1(Paper *, CLIENT *);
extern retrieve_res *retrieve_burst_1(int *, CLIENT *);
extern long *copy_1(TwoPaper *, CLIENT *);
extern long *move_1(TwoPaper *, CLIENT *);
extern long *delete_1(Paper *, CLIENT *);
extern long *portion_1(portionspec *, CLIENT *);
extern krb_info_res *krb_info_1(int *, CLIENT *);
extern long *kill_server_1(int *, CLIENT *);
extern server_stats *server_stats_1(int *, CLIENT *);
extern quorum_res *server_quorum_1(quorumstat *, CLIENT *);
extern long *server_store_1(Contents *, CLIENT *);
extern long *server_delete_1(Contents *, CLIENT *);
extern long *server_commit_1(DBVers *, CLIENT *);
#endif

